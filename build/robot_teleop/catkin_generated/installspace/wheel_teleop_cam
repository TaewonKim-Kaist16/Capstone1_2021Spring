#!/usr/bin/env python3

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
import numpy

from geometry_msgs.msg import Twist
from std_msgs.msg import Float64 as joint_command
from core_msgs.msg import dist_center
import sys, select, os
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

BURGER_MAX_LIN_VEL = 1.00
BURGER_MAX_ANG_VEL = 2.84

WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

LIN_VEL_STEP_SIZE = 0.01
ANG_VEL_STEP_SIZE = 0.02


centers = [];
count = 0;
target_linear_vel   = 0.0
target_angular_vel  = 0.0
control_linear_vel  = 0.0
control_angular_vel = 0.0

last_linear_vel = 0.0
last_angular_vel = 0.0

e = """
Communications Failed
"""


def callback(msg):
    if len(centers) != 0:
        centers.clear()
    for i in range(16):
        centers.append(msg.dist[i])
    #print(centers)

def control_vel(list):
    global last_linear_vel
    global last_angular_vel
    global target_linear_vel
    global target_angular_vel

    leftward = 0
    rightward = 0
    outline = 0
    first_nonzero = 0
    nonzero_start = 0
    nonzero_last = 0;
    for i in range(len(list)):
        if list[i] < 0:
            leftward+=1
            if first_nonzero == 0:
                first_nonzero = -1
                nonzero_start = i
        elif list[i] > 0:
            rightward+=1;
            if first_nonzero == 0:
                first_nonzero = 1
                nonzero_start = i
        elif list[i] == 0:
            outline+=1
    for i in range(len(list), 0, -1):
        if list[i-1] != 0:
            nonzero_last = i-1
            break
    if outline > 10:
        target_linear_vel = last_linear_vel
        target_angular_vel = last_angular_vel

        return

    #if list[0] == 0 and list[1] == 0 and first_nonzero == -1:

    if abs(list[nonzero_start]) > 60 and abs(list[nonzero_start+1]) > 60 and first_nonzero == -1:
        target_angular_vel = -0.15
        target_linear_vel = -0.04

    #elif list[0] == 0 and list[1] == 0 and first_nonzero == 1:
        #if abs(list[nonzero_start]-list[nonzero_start+1]) > 40 and abs(list[nonzero_start+1]-list[nonzero_start+2]) > 40:
    elif ( ( abs(list[nonzero_start]) > 60 and abs(list[nonzero_start+1]+list[nonzero_start+2])/2 > 60 ) or ( abs(list[nonzero_last])>60 and abs(list[nonzero_last-1])>60 ) ) and first_nonzero == 1:
            target_angular_vel = 0.15
            target_linear_vel = -0.04
    else:
        target_linear_vel = -0.09
        #if list[0] < 0:
        if leftward > rightward:
            target_angular_vel  = -0.08
        #elif list[0] > 0:
        elif leftward < rightward:
            target_angular_vel  = 0.08
        else:
            target_angular_vel  = 0

    last_linear_vel = target_linear_vel
    last_angular_vel = target_angular_vel




def vels(target_linear_vel, target_angular_vel):
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):
    if input > output:
        output = min( input, output + slop )
    elif input < output:
        output = max( input, output - slop )
    else:
        output = input

    return output

def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel

def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":
      vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel



if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('wheel_teleop_cam')
    rate = rospy.Rate(5)


    pub_left_wheel = rospy.Publisher('joint_front_left_wheel', joint_command, queue_size=10)
    pub_right_wheel = rospy.Publisher('joint_front_right_wheel', joint_command, queue_size=10)
    pub_actuator = rospy.Publisher('turtlebot3_waffle_sim/joint1_position_controller/command', joint_command, queue_size=10)

    while not rospy.is_shutdown():
        sub = rospy.Subscriber("/distance", dist_center, callback)

        target_linear_vel = -0.09
        if len(centers)>0:
            control_vel(centers)
        else:
            target_angular_vel = 0.0
        control_linear_vel  = 0.0
        control_angular_vel = 0.0
        target_angle = 0.0

        print(vels(target_linear_vel, target_angular_vel))
        print(centers)
        command_left_wheel = joint_command()
        command_right_wheel = joint_command()
        command_actuator = joint_command()

        command_left_wheel.data = 50.0*target_linear_vel - 10.0*target_angular_vel
        command_right_wheel.data = 50.0*target_linear_vel + 10.0*target_angular_vel
        command_actuator.data = target_angle
        pub_left_wheel.publish(command_left_wheel)
        pub_right_wheel.publish(command_right_wheel)
        pub_actuator.publish(command_actuator)
        rate.sleep()

