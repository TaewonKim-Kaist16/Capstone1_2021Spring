function callback_cmdvel_sub(msg)
    local Vl = msg.linear.x * 5
    local Vr = msg.angular.z * 5
    
    sim.setJointTargetVelocity(hbaseToLFJoint,-Vl + Vr)
    sim.setJointTargetVelocity(hbaseToRFJoint,Vl + Vr)
    sim.setJointTargetVelocity(hbaseToLRJoint,-Vl + Vr)
    sim.setJointTargetVelocity(hbaseToRRJoint,Vl + Vr)

    sim.addStatusbarMessage(string.format("Vl:%f Vr:%f",Vl, Vr))
end

function callback_GripperMain_sub(msg)
    local V = msg.linear.z*5
    sim.setJointTargetVelocity(hbaseToGripperMainJoint,V)

    sim.addStatusbarMessage(string.format("V:%f",V))
end

function callback_GripperArm_sub(msg)
    local V = msg.linear.y*5
    sim.setJointTargetVelocity(hbaseToGripperArmJoint,V)

    sim.addStatusbarMessage(string.format("V:%f",V))
end
function sysCall_init()
    -- do some initialization here
    hbaseToLFJoint = sim.getObjectHandle("Main2LFWheel")
    hbaseToRFJoint = sim.getObjectHandle("Main2RFWheel")
    hbaseToLRJoint = sim.getObjectHandle("Main2LRWheel")
    hbaseToRRJoint = sim.getObjectHandle("Main2RRWheel")
    hbaseToGripperMainJoint = sim.getObjectHandle("Main2GripperMain")
    hbaseToGripperArmJoint = sim.getObjectHandle("GripperMain2GripperArm")

    cmdvelSub=simROS.subscribe('/cmd_vel','geometry_msgs/Twist','callback_cmdvel_sub')
    GripperMainSub = simROS.subscribe('/GripperMain/cmd_vel','geometry_msgs/Twist','callback_GripperMain_sub')
    GripperArmSub = simROS.subscribe('/GripperArm/cmd_vel','geometry_msgs/Twist','callback_GripperArm_sub')
    
    transform={header={stamp=simROS.getTime(), frame_id='map'}, child_frame_id='velodyneVPL', transform={translation={x=0, y=0, z=0}, rotation={x=0, y=0, z=0, w=1}}}
    simROS.sendTransform(transform)
    
end

function sysCall_actuation()
    -- put your actuation code here


end

function sysCall_cleanup()
    -- do some clean-up here
    simROS.shutdownSubscriber(cmdvelSub)
    simROS.shutdownSubscriber(GripperMainSub)
    simROS.shutdownSubscriber(GripperArmSub)
end
